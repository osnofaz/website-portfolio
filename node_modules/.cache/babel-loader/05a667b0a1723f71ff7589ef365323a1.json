{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mafon\\\\Documents\\\\react-website-portfolio-1\\\\src\\\\components\\\\Toggle.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './styles/toggle.css';\nimport { setTheme } from './utils/themes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Toggle() {\n  _s();\n\n  // false = dark mode because of the way I wrote the CSS\n  const [active, setActive] = useState(false); // the opposite, for screen readers\n\n  const [ariaActive, setAriaActive] = useState(true);\n  let theme = localStorage.getItem('theme');\n\n  const changeThemeAndToggle = () => {\n    if (localStorage.getItem('theme') === 'theme-dark') {\n      setTheme('theme-light');\n      setActive(true);\n      setAriaActive(false);\n    } else {\n      setTheme('theme-dark');\n      setActive(false);\n      setAriaActive(true);\n    }\n  };\n\n  const handleOnClick = () => {\n    changeThemeAndToggle();\n  };\n\n  const handleKeypress = e => {\n    if (e.code === \"Enter\") {\n      changeThemeAndToggle();\n    }\n  };\n\n  useEffect(() => {\n    if (localStorage.getItem('theme') === 'theme-dark') {\n      setActive(false);\n      setAriaActive(true);\n    } else if (localStorage.getItem('theme') === 'theme-light') {\n      setActive(true);\n      setAriaActive(false);\n    }\n  }, [theme]);\n  const [darkMode, setDarkMode] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: darkMode,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containerswitch\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"var(--dark-lua)\"\n        },\n        children: \"\\u263D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"switch-checkbox\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"toggle\",\n          className: \"switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            \"aria-label\": \"dark mode toggle\",\n            role: \"switch\",\n            onChange: () => setDarkMode(!darkMode),\n            \"aria-checked\": ariaActive,\n            onKeyPress: handleKeypress,\n            id: \"toggle\",\n            className: \"toggle--checkbox\",\n            onClick: handleOnClick,\n            checked: active,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"var(--dark-sol)\"\n        },\n        children: \"\\u2600\\uFE0E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Toggle, \"PlNSMBCl6JLxPXUDloRA8Vi42WU=\");\n\n_c = Toggle;\nexport default Toggle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Toggle\");","map":{"version":3,"sources":["C:/Users/mafon/Documents/react-website-portfolio-1/src/components/Toggle.js"],"names":["React","useEffect","useState","setTheme","Toggle","active","setActive","ariaActive","setAriaActive","theme","localStorage","getItem","changeThemeAndToggle","handleOnClick","handleKeypress","e","code","darkMode","setDarkMode","color"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './styles/toggle.css';\r\nimport { setTheme } from './utils/themes';\r\n\r\nfunction Toggle() {\r\n    // false = dark mode because of the way I wrote the CSS\r\n    const [active, setActive] = useState(false)\r\n    // the opposite, for screen readers\r\n    const [ariaActive, setAriaActive] = useState(true)\r\n    let theme = localStorage.getItem('theme')\r\n\r\n    const changeThemeAndToggle = () => {\r\n      if (localStorage.getItem('theme') === 'theme-dark') {\r\n        setTheme('theme-light')\r\n        setActive(true)\r\n        setAriaActive(false)\r\n      } else {\r\n        setTheme('theme-dark')\r\n        setActive(false)\r\n        setAriaActive(true)\r\n      }\r\n    }\r\n\r\n    const handleOnClick = () => {\r\n      changeThemeAndToggle()\r\n    }\r\n\r\n    const handleKeypress = e => {\r\n        if (e.code === \"Enter\") {\r\n          changeThemeAndToggle()\r\n        }\r\n      }\r\n\r\n    useEffect(() => {\r\n      if (localStorage.getItem('theme') === 'theme-dark') {\r\n        setActive(false)\r\n        setAriaActive(true)\r\n      } else if (localStorage.getItem('theme') === 'theme-light') {\r\n        setActive(true)\r\n        setAriaActive(false)\r\n      }\r\n    }, [theme])\r\n\r\n    const [darkMode, setDarkMode] = useState(false);\r\n\r\n    return (\r\n        <div className={darkMode}>\r\n      <div className=\"containerswitch\">\r\n      <span style={{ color: \"var(--dark-lua)\" }}>☽</span>\r\n      <div className=\"switch-checkbox\">\r\n      <label htmlFor=\"toggle\" className=\"switch\">\r\n\r\n        <input type=\"checkbox\" aria-label=\"dark mode toggle\" role=\"switch\" onChange={() => setDarkMode(!darkMode)} aria-checked={ariaActive} onKeyPress={handleKeypress} id=\"toggle\" className=\"toggle--checkbox\" onClick={handleOnClick} checked={active} readOnly />\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n      </div>\r\n      <span style={{ color: \"var(--dark-sol)\" }}>☀︎</span>\r\n      </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Toggle;\r\n"]},"metadata":{},"sourceType":"module"}